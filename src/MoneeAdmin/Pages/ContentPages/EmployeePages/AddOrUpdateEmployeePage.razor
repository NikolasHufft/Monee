@implements IDisposable

@if (allStates.ShowEmployee)
{
    if (ShowAddOrUpdateEmployee)
    {
        <div class="container">
            <div class="row mt-5">
                <div class="col-lg-1 text-center">
                    <i class="bi-exclamation-lg fs-3 fw-bold text-bg-danger" style="cursor:pointer" @onclick="CloseForm"></i>
                </div>
                <div class="col-lg-6 text-center"><h2>@Title Employee</h2></div>
            </div>
            <div class="row">
                <div class="col-lg-12 mt-2 mb-5 d-flex justify-content-center">
                    <div class="hstack">
                        @if (FirstLayer)
                        {
                            <div class="@FloatingNumber1 text-center">1</div>
                            <div class="@FloatingDiv1 format-border"></div>
                            <div class="@FloatingNumber2 text-center">2</div>
                            <div class="@FloatingDiv2 format-border"></div>


                        }
                        @if (SecondLayer)
                        {
                            <div class="@FloatingNumber1 text-center">1</div>
                            <div class="@FloatingDiv1 format-border"></div>
                            <div class="@FloatingNumber1 text-center">2</div>
                            <div class="@FloatingDiv1 format-border"></div>
                        }
                    </div>
                </div>
                @* Employee form / first and second layers *@
                <div class="col-lg-12">
                    <div class="container-fluid">
                        @if (FirstLayer)
                        {
                            <EditForm Enhance Model="EmployeeGroup1" OnSubmit="Form1">
                                <DataAnnotationsValidator />
                                <div class="row">
                                    <div class="col-lg-2"></div>
                                    <div class="col-lg-4">
                                        <div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Personal Information</div>
                                        <div class="card-body">
                                            <div class="form-group">
                                                <label class="form-label">Full Name</label>
                                                <InputText @bind-Value="EmployeeGroup1.Name" class="form-control" />
                                                <ValidationMessage For="()=>EmployeeGroup1.Name" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-2">
                                                <label class="form-label">Telephone</label>
                                                <InputText @bind-Value="EmployeeGroup1.TelephoneNumber" class="form-control" />
                                                <ValidationMessage For="()=>EmployeeGroup1.TelephoneNumber" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-2">
                                                <label class="form-label">Address</label>
                                                <InputText @bind-Value="EmployeeGroup1.Address" class="form-control" />
                                                <ValidationMessage For="()=>EmployeeGroup1.Address" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-2">
                                                <img src="@(EmployeeGroup1.Photo == "" ? "images/profiles/profile2.png" : EmployeeGroup1.Photo)" width="100" height="100" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-4 mt-2">
                                        <div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Other Information</div>
                                        <div class="card-body">
                                            <div class="form-group">
                                                <label class="form-label">Civil Id</label>
                                                <InputText @bind-Value="EmployeeGroup1.CivilId" class="form-control" />
                                                <ValidationMessage For="()=>EmployeeGroup1.CivilId" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-2">
                                                <label class="form-label">File Number</label>
                                                <InputText @bind-Value="EmployeeGroup1.FileNumber" class="form-control" />
                                                <ValidationMessage For="()=>EmployeeGroup1.FileNumber" class="text-danger" />
                                            </div>
                                            @* <div class="form-group mt-2">
                                                <label class="form-label">Photo</label>
                                                <InputText @bind-Value="EmployeeGroup1.Photo" class="form-control" />

                                                <ValidationMessage For="()=>EmployeeGroup1.Photo" class="text-danger" />
                                            </div> *@
                                            <div class="form-group mt-3">
                                                <label class="form-label @(ImageUploadMessage == "" ? "" : "text-danger")">
                                                    @(ImageUploadMessage == "" ? "Updaload Image" : ImageUploadMessage)
                                                </label>
                                                @* <InputText @bind-Value="EmployeeGroup1.Photo" class="form-control" /> *@
                                                <InputFile class="form-control" OnChange="UploadImage"></InputFile>
                                                <ValidationMessage For="()=>EmployeeGroup1.Photo" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-5">
                                                <button class="btn btn-primary float-end mt-4 mb-5">
                                                    <i class="bi bi-arrow-right"></i>
                                                    Next
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-2"></div>
                                </div>
                            </EditForm>
                        }
                        @if (SecondLayer)
                        {
                            <EditForm Enhance Model="EmployeeGroup2" OnSubmit="Form2">
                                <DataAnnotationsValidator />
                                <div class="row">
                                    <div class="col-lg-2"></div>
                                    <div class="col-lg-4">
                                        <div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Job Information</div>
                                        <div class="card-body">
                                            <div class="form-group">
                                                <label class="form-label">Job Name</label>
                                                <InputText @bind-Value="EmployeeGroup2.JobName" class="form-control" />
                                                <ValidationMessage For="()=>EmployeeGroup2.JobName" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-3">
                                                @* <label class="form-label"> </label>
                                                <label class="form-label"> @(GeneralDepartmentName == "" ? "Select General Department" : $"Selected General Department: {GeneralDepartmentName}")</label> *@
                                                @{
                                                    string generalDepartment = GeneralDepartmentName.Equals("") ? "Select General Department" : GeneralDepartmentName;
                                                }
                                                <SfDropDownList TValue="string" TItem="GeneralDepartment" Placeholder="@generalDepartment" DataSource="GeneralDepartments">
                                                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="GeneralDepartment" ValueChange="OnGeneralDepartmentValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group mt-3">
                                               @*  <label class="form-label"> @(DepartmentName == "" ? "Select Department" : $"Select Department: {DepartmentName}")</label> *@
                                                @{
                                                    string departmentName = DepartmentName.Equals("") ? "Select General Department" : DepartmentName;
                                                }
                                                <SfDropDownList TValue="string" TItem="Department" Placeholder="@departmentName" DataSource="Departments">
                                                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="Department" ValueChange="OnDepartmentValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group mt-3">
                                               @*  <label class="form-label"> @(Employee.Branch == null ? "Select Branch" : $"Selected Branch: {Employee.Branch.Name}")</label> *@
                                                @{
                                                    string branch = Branch.Equals("") ? "Select General Department" : Branch;
                                                }
                                                <SfDropDownList TValue="string" TItem="Branch" Placeholder="@branch" DataSource="Branches">
                                                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="Branch" ValueChange="OnBranchValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                                <ValidationMessage For="()=>EmployeeGroup2.BranchId" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-4 mb-5">
                                                <button class="btn btn-primary float-start" type="button" @onclick="PrevClicked">
                                                    <i class="bi bi-arrow-left"></i>
                                                    Prev
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-4">
                                        <div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Location Information</div>
                                        <div class="card-body">
                                            <div class="form-group">
                                                @{
                                                    string country = CountryName.Equals("") ? "Select General Department" : CountryName;
                                                }
                                                @* <label class="form-label"> @(CountryName == "" ? "Select Country" : $"Select Country: {CountryName}")</label> *@
                                                <SfDropDownList TValue="string" TItem="Country" Placeholder="@country" DataSource="Countries">
                                                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="Country" ValueChange="OnCountryValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group mt-3">
                                                @* <label class="form-label"> @(CityName == "" ? "Select City" : $"Select City: {CityName}")</label> *@
                                                @{
                                                    string city = CityName.Equals("") ? "Select General Department" : CityName;
                                                }
                                                <SfDropDownList TValue="string" TItem="City" Placeholder="@city" DataSource="Cities">
                                                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="City" ValueChange="OnCityValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group mt-3">
                                                @* <label class="form-label"> @(Employee.Town == null ? "Select Town" : $"Selected Town: {Employee.Town.Name}")</label> *@
                                                @{
                                                    string town = TownName.Equals("") ? "Select General Department" : TownName;
                                                }
                                                <SfDropDownList TValue="string" TItem="Town" Placeholder="@town" DataSource="Towns">
                                                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="Town" ValueChange="OnTownValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                                <ValidationMessage For="()=>EmployeeGroup2.TownId" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-3">
                                                <label class="form-label">Other</label>
                                                <textarea @bind="EmployeeGroup2.Other" placeholder="Optional" class="form-control" />
                                            </div>
                                            <div class="form-group mt-4 mb-5">
                                                <button class="btn btn-success float-end" type="submit">
                                                    <i class="bi bi-save"></i>
                                                    Save
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-2"></div>
                                </div>
                            </EditForm>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
}

<style>
    .floatingDiv {
    width: 500px;
    background: #228ada;
    height: 10px;
    }

    .floatingNumber {
    border-radius: 50%;
    color: white;
    background: #1d1858;
    width: 20px;
    height: 20px;
    }

    .inactive-div {
    width: 500px;
    background: gray;
    height: 10px;
    }

    .inactive-span {
    border-radius: 50%;
    color: white;
    background: gray;
    width: 20px;
    height: 20px;
    }

    .format-border {
    border-radius: 20%;
    }
</style>

@code
{
    [Parameter] public Employee Employee { get; set; } = new();
    [Parameter] public bool ShowAddOrUpdateEmployee { get; set; }

    [Parameter] public EmployeeGroup1 EmployeeGroup1 { get; set; } = new();
    [Parameter] public EmployeeGroup2 EmployeeGroup2 { get; set; } = new();

    [Parameter] public List<Country> Countries { get; set; } = new();
    [Parameter] public List<City> Cities { get; set; } = new();
    [Parameter] public List<Town> Towns { get; set; } = new();

    [Parameter] public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
    [Parameter] public List<Department> Departments { get; set; } = new();
    [Parameter] public List<Branch> Branches { get; set; } = new();

    [Parameter] public EventCallback NotifyParentFormCloseClicked { get; set; }
    private async Task CloseForm(MouseEventArgs args)
    {
        ShowAddOrUpdateEmployee = false;
        await NotifyParentFormCloseClicked.InvokeAsync();
    }

    string FloatingNumber1 = "floatingNumber";
    string FloatingDiv1 = "floatingDiv";

    string FloatingNumber2 = "inactive-span";
    string FloatingDiv2 = "inactive-div";

    public string Title { get; set; } = "Add";
    public string GeneralDepartmentName { get; set; } = "";
    public string DepartmentName { get; set; } = "";
    public string Branch { get; set; } = "";
    public string CountryName { get; set; } = "";
    public string CityName { get; set; } = "";
    public string TownName { get; set; } = "";

    public bool FirstLayer { get; set; } = true;
    public bool SecondLayer { get; set; } = false;

    private void Showlayer2()
    {
        FirstLayer = false;
        SecondLayer = true;
    }

    private void PrevClicked()
    {
        FirstLayer = true;
        SecondLayer = false;
    }

    // File Uplaod
    string ImageUploadMessage = string.Empty;
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        if (e.File.Name.ToLower().Contains(".png"))
        {
            var format = "image/png";
            var resizeImage = await e.File.RequestImageFileAsync(format, 300, 300);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var image = $"data: {format}; base64, {Convert.ToBase64String(buffer)}";
            ImageUploadMessage = string.Empty;
            image = string.Empty;
            return;
        }
        ImageUploadMessage = "PNG file needed";
        return;
    }

    // Validate Forms
    // Form 1
    private bool ValidateEmployeeGroup1()
    {
        if (string.IsNullOrWhiteSpace(EmployeeGroup1.Name) ||
        string.IsNullOrWhiteSpace(EmployeeGroup1.TelephoneNumber) ||
        string.IsNullOrWhiteSpace(EmployeeGroup1.FileNumber) ||
        string.IsNullOrWhiteSpace(EmployeeGroup1.Address) ||
        string.IsNullOrWhiteSpace(EmployeeGroup1.Photo) ||
        string.IsNullOrWhiteSpace(EmployeeGroup1.CivilId))
        {
            return false;
        }
        else
        {
            return true;
        }
    }
    // Form 2
    private bool ValidateEmployeeGroup2()
    {
        if (string.IsNullOrWhiteSpace(EmployeeGroup2.JobName) ||
            EmployeeGroup2.TownId == 0 ||
            EmployeeGroup2.BranchId == 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    // Save form
    [Parameter] public EventCallback<Employee> HandleSaveEmployeeClickedEvent { get; set; }

    private void Form1(EditContext args)
    {
        if (ValidateEmployeeGroup1())
        {
            // TODO: Validate if the user already exist
            Employee.Name = EmployeeGroup1.Name;
            Employee.PhoneNumber = EmployeeGroup1.TelephoneNumber;
            Employee.Address = EmployeeGroup1.Address;
            Employee.CivilId = EmployeeGroup1.CivilId;
            Employee.FileNumber = EmployeeGroup1.FileNumber;
            Employee.PhotoUrl = EmployeeGroup1.Photo;

            Showlayer2();
        }
    }

    private async Task Form2(EditContext args)
    {
        if (ValidateEmployeeGroup2())
        {
            Employee.JobTitle = EmployeeGroup2.JobName;
            Employee.Notes = EmployeeGroup2.Other!;
            Employee.BranchId = EmployeeGroup2.BranchId!;
            Employee.TownId = EmployeeGroup2.TownId;

            // Save
            await HandleSaveEmployeeClickedEvent.InvokeAsync(Employee);
            
            ClearContent();
        }
    }

    public void ClearContent()
    {
        // Cleanup
        EmployeeGroup1 = new();
        EmployeeGroup2 = new();
        Employee = new();
    }

    protected override void OnInitialized()
    {
        allStates.Action += StateHasChanged;
    }

    public void Dispose()
    {
        allStates.Action -= StateHasChanged;
    }

    [Parameter] public EventCallback<int> HandleGeneralDepartmentSelectedEvent { get; set; }
    private async Task OnGeneralDepartmentValueChange(ChangeEventArgs<string, GeneralDepartment> args)
    {
        await HandleGeneralDepartmentSelectedEvent.InvokeAsync(int.Parse(args.Value));
    }

    [Parameter] public EventCallback<int> HandleDepartmentSelectedEvent { get; set; }
    private async Task OnDepartmentValueChange(ChangeEventArgs<string, Department> args)
    {
        await HandleDepartmentSelectedEvent.InvokeAsync(int.Parse(args.Value));
    }

    //[Parameter] public EventCallback<int> HandleBranchSelectedEvent { get; set; }
    private void OnBranchValueChange(ChangeEventArgs<string, Branch> args)
    {
        EmployeeGroup2.BranchId = int.Parse(args.Value);
    }

    [Parameter] public EventCallback<int> HandleCountrySelectedEvent { get; set; }
    private async Task OnCountryValueChange(ChangeEventArgs<string, Country> args)
    {
        await HandleCountrySelectedEvent.InvokeAsync(int.Parse(args.Value));
    }

    [Parameter] public EventCallback<int> HandleCitySelectedEvent { get; set; }
    private async Task OnCityValueChange(ChangeEventArgs<string, City> args)
    {
        await HandleCitySelectedEvent.InvokeAsync(int.Parse(args.Value));
    }

    //[Parameter] public EventCallback<int> HandleTownSelectedEvent { get; set; }
    private void OnTownValueChange(ChangeEventArgs<string, Town> args)
    {
        EmployeeGroup2.TownId = int.Parse(args.Value);
    }
}