@implements IDisposable

@if (ShowMainPage)
{
    <div class="container-fluid mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <button class="btn btn-outline-sucess" @onclick="ShowAddOrUpdateEmployeeButtonClicked">
                            <i class="bi bi-plus-circle-dotted">
                                Add Employee
                            </i>
                        </button>
                    </div>
                    <div class="card-body">
                        <SfGrid DataSource="@Employees">
                            <GridColumns>
                                <GridColumn HeaderText="Employee Image">
                                    <Template>
                                        @{
                                            var employee = (context as Employee);
                                            <div class="image">
                                                <img src="@employee!.PhotoUrl" alt="@employee.Name" width="150" height="150" />
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                                <GridColumn Field=@nameof(Employee.CivilId) HeaderText="Civil Id"></GridColumn>
                                <GridColumn Field=@nameof(Employee.FileNumber) HeaderText="File Number"></GridColumn>
                                <GridColumn Field=@nameof(Employee.Name) HeaderText="Name"></GridColumn>
                                <GridColumn Field=@nameof(Employee.PhoneNumber) HeaderText="Phone Number"></GridColumn>
                                <GridColumn Field=@nameof(Employee.JobTitle) HeaderText="Job Title"></GridColumn>
                                <GridColumn Field=@nameof(Employee.Branch.Name) HeaderText="Branch"></GridColumn>
                                <GridColumn Field=@nameof(Employee.Town.Name) HeaderText="Town"></GridColumn>
                                <GridColumn HeaderText="Menu" HeaderTextAlign="TextAlign.Left">
                                    <Template>
                                        @{
                                            var employee = context as Employee;
                                            <i class="bi bi-menu-down text-primary" id="cursorStyle" @onclick="()=>ShowMenuPopUp(employee!)"></i>
                                        }
                                    </Template>
                                </GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>

</style>

<AddOrUpdateEmployeePage @ref="addOrUpdateEmployee"
Employee="Employee"
ShowAddOrUpdateEmployee="ShowAddOrUpdatePage"
Countries="DefaultCountries"
Cities="SelectedCities"
Towns="SelectedTowns"
GeneralDepartments="DefaultGeneralDepartments"
Departments="SelectedDepartments"
Branches="SelectedBranches"
NotifyParentFormCloseClicked="NotifyParentFormCloseClicked"
HandleSaveEmployeeClickedEvent="HandleSaveEmployeeClickedEventoyee"
HandleGeneralDepartmentSelectedEvent="HandleGeneralDepartmentSelectedEvent"
HandleDepartmentSelectedEvent="HandleDepartmentSelectedEvent"
HandleCountrySelectedEvent="HandleCountrySelectedEvent"
HandleCitySelectedEvent="HandleCitySelectedEvent" />

<EmployeeDetailPage EmployeeDetails="Employee"
ShowDetailsPage="ShowDetailsPage"
HandleDetailsPageCloseBtnClicked="HandleDetailsPageCloseBtnClicked" />

<ContextMenu @ref="contextMenu"
HandleEditClicked="EditClicked"
HandleViewClicked="ViewClicked"
HandleDeleteClicked="DeleteClicked"
HandleAddHealthClicked="AddHealthClicked"
HandleAddOvertimeClicked="AddOvertimeClicked"
HandleAddSanctionClicked="AddSanctionClicked"
HandleAddVacationClicked="AddVacationClicked" />

<DoctorDialog @ref="doctorDialog" Doctor="Doctor" HandleSaveOperationEvent="SaveHealthEvent" />

<OvertimeDialog @ref="overtimeDialog" Overtime="Overtime" OvertimeTypes="OvertimeTypes" HandleSaveOperationEvent="SaveOvertimeEvent" />
<VacationDialog @ref="vacationDialog" Vacation="Vacation" VacationTypes="VacationTypes" HandleSaveOperationEvent="SaveVacationEvent" />
<SanctionDialog @ref="sanctionDialog" Sanction="Sanction" SanctionTypes="SanctionTypes" HandleSaveOperationEvent="SaveSanctionEvent" />

@code {
    ContextMenu? contextMenu;

    AddOrUpdateEmployeePage? addOrUpdateEmployee;

    public bool ShowMainPage { get; set; } = true;
    public bool ShowAddOrUpdatePage { get; set; } = false;

    public List<Employee> Employees { get; set; } = [];
    public Employee Employee { get; set; } = new();

    public List<GeneralDepartment> DefaultGeneralDepartments { get; set; } = [];
    public List<Department> DefaultDepartments { get; set; } = [];
    public List<Branch> DefaultBranches { get; set; } = [];

    public List<Country> DefaultCountries { get; set; } = [];
    public List<City> DefaultCities { get; set; } = [];
    public List<Town> DefaultTowns { get; set; } = [];

    public List<Department> SelectedDepartments { get; set; } = [];
    public List<Branch> SelectedBranches { get; set; } = [];
    public List<City> SelectedCities { get; set; } = [];
    public List<Town> SelectedTowns { get; set; } = [];


    protected async override Task OnInitializedAsync()
    {
        allStates.Action += StateHasChanged;

        await LoadEmployees();
        await LoadDefaults();
    }

    private async Task LoadDefaults()
    {
        DefaultCountries = await countryService.GetAll(Constants.CountryBaseUrl);
        DefaultCities = await cityService.GetAll(Constants.CityBaseUrl);
        DefaultTowns = await townService.GetAll(Constants.TownBaseUrl);

        DefaultGeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
        DefaultDepartments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
        DefaultBranches = await branchService.GetAll(Constants.BranchBaseUrl);
    }

    private async Task LoadEmployees()
    {
        Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);
    }

    private async Task NotifyParentFormCloseClicked()
    {
        ShowMainPage = true;
        ShowAddOrUpdatePage = false;
        await LoadEmployees();
        SelectedEmployee = new();
    }

    public void ShowAddOrUpdateEmployeeButtonClicked()
    {
        ShowMainPage = false;
        ShowAddOrUpdatePage = true;
    }

    public void Dispose()
    {
        allStates.Action -= StateHasChanged;
    }

    private async Task HandleSaveEmployeeClickedEventoyee(Employee employee)
    {
        bool successCheck = false;

        if (employee.Id > 0)
        {
            var result = await employeeService.Update(employee, Constants.EmployeeBaseUrl);
            successCheck =  await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var result = await employeeService.Insert(employee, Constants.EmployeeBaseUrl);
            successCheck =  await DisplayMessage(result.Flag, result.Message);
        }
        if (successCheck)
        {
            addOrUpdateEmployee!.ClearContent();
        }
    }

    private void HandleGeneralDepartmentSelectedEvent(int id)
    {
        SelectedDepartments = DefaultDepartments.Where(p => p.Id == id).ToList();
    }

    private void HandleDepartmentSelectedEvent(int id)
    {
        SelectedBranches = DefaultBranches.Where(p => p.DepartmentId == id).ToList();
    }

    private void HandleCountrySelectedEvent(int id)
    {
        SelectedCities = DefaultCities.Where(p => p.CountryId == id).ToList();
    }

    private void HandleCitySelectedEvent(int id)
    {
        SelectedTowns = DefaultTowns.Where(p => p.Id == id).ToList();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public Employee SelectedEmployee { get; set; } = new();

    public void ShowMenuPopUp(Employee employee)
    {
        SelectedEmployee = employee;
        contextMenu!.OpenContextMenu();
    }

    private void EditClicked()
    {
        //EmployeeGroup1
        addOrUpdateEmployee!.Employee.Id = SelectedEmployee.Id;
        addOrUpdateEmployee!.EmployeeGroup1.Name = SelectedEmployee.Name;
        addOrUpdateEmployee!.EmployeeGroup1.TelephoneNumber = SelectedEmployee.PhoneNumber;
        addOrUpdateEmployee!.EmployeeGroup1.FileNumber = SelectedEmployee.FileNumber;
        addOrUpdateEmployee!.EmployeeGroup1.Address = SelectedEmployee.Address;
        addOrUpdateEmployee!.EmployeeGroup1.Photo = SelectedEmployee.PhotoUrl;
        addOrUpdateEmployee!.EmployeeGroup1.CivilId = SelectedEmployee.CivilId;

        //EmployeeGroup2
        addOrUpdateEmployee!.EmployeeGroup2.JobName = SelectedEmployee.JobTitle;
        addOrUpdateEmployee!.EmployeeGroup2.Other = SelectedEmployee.Notes;

        addOrUpdateEmployee!.GeneralDepartmentName = SelectedEmployee.Notes;
        addOrUpdateEmployee!.DepartmentName = SelectedEmployee.Notes;
        addOrUpdateEmployee!.Branch = SelectedEmployee.Notes;

        addOrUpdateEmployee!.CountryName = SelectedEmployee.Town!.City!.Country!.Name;
        addOrUpdateEmployee!.CityName = SelectedEmployee.Town!.City!.Name;
        addOrUpdateEmployee!.TownName = SelectedEmployee.Town!.Name;

        //Title
        addOrUpdateEmployee.Title = "Update";
        SelectedEmployee = new();
        contextMenu!.CloseContextMenu();
        ShowAddOrUpdatePage = true;
        ShowMainPage = false;
    }

    private async Task DeleteClicked()
    {
        contextMenu!.CloseContextMenu();
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete {SelectedEmployee.Id}", "Confirm Delete?");

        if (!confirm)
        {
            return;
        }

        var reponse = await employeeService.DeleteById(SelectedEmployee.Id, Constants.EmployeeBaseUrl);
        var result = await DisplayMessage(reponse.Flag, reponse.Message);

        if (result)
        {
            SelectedEmployee =  new();
            await LoadEmployees();
        }
    }

    public bool ShowDetailsPage { get; set; } = false;
    private void ViewClicked()
    {
        Employee = SelectedEmployee;
        contextMenu!.CloseContextMenu();
        ShowDetailsPage = true;
        ShowMainPage = false;
        SelectedEmployee = new();
    }

    void HandleDetailsPageCloseBtnClicked()
    {
        ShowDetailsPage = false;
        ShowMainPage= true;
    }

    DoctorDialog? doctorDialog;
    public Doctor Doctor { get; set; } = new();
    private void AddHealthClicked()
    {
        Doctor.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        doctorDialog?.OpenDialog();
    }

    OvertimeDialog? overtimeDialog;
    public Overtime Overtime { get; set; } = new();
    List<OvertimeType> OvertimeTypes = [];
    private void AddOvertimeClicked()
    {
        Overtime.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        overtimeDialog?.OpenDialog();
    }

    SanctionDialog? sanctionDialog;
    public Sanction Sanction { get; set; } = new();
    List<SanctionType> Sanctionypes = [];
    private void AddSanctionClicked()
    {
        Sanction.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        sanctionDialog?.OpenDialog();
    }

    VacationDialog? vacationDialog;
    public Vacation Vacation { get; set; } = new();
    List<VacationType> VacationTypes = [];
    private void AddVacationClicked()
    {
        Vacation.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        vacationDialog?.OpenDialog();
    }

    private async Task SaveHealthEvent(Doctor doctor)
    {
        doctor.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await doctorService.Insert(doctor, Constants.DoctorBaseUrl);
        var response = await DisplayMessage(flag, message);
        if (response)
        {
            SelectedEmployee = new();
            Doctor = new();
            doctorDialog!.CloseOpenDialog();
        }
    }

    // VacationDialog? vacationDialog;
    // public Vacation Vacation { get; set; } = new();
    // List<VacationTypes> VacationTypes = [];
    // private async Task SaveVacationEvent(Vacation vacation)
    // {
    //     sanction.EmployeeId = SelectedEmployee.Id;
    //     var (flag, message) = await sanctionService.Insert(vacation, Constants.SanctionBaseUrl);
    //     var response = await DisplayMessage(flag, message);
    //     if (response)
    //     {
    //         SelectedEmployee = new();
    //         Sanction = new();
    //         sanctionrDialog!.CloseOpenDialog();
    //     }
    // }

    // SanctionDialog? sanctionDialog;
    // public Sanction Sanction { get; set; } = new();
    // List<SanctionType> SanctionTypes = [];
    // private async Task SanctionTypes(Sanction sanction)
    // {
    //     sanction.EmployeeId = SelectedEmployee.Id;
    //     var (flag, message) = await sanctionService.Insert(vacation, Constants.SanctionBaseUrl);
    //     var response = await DisplayMessage(flag, message);
    //     if (response)
    //     {
    //         SelectedEmployee = new();
    //         Sanction = new();
    //         sanctionrDialog!.CloseOpenDialog();
    //     }
    // }
    private void SaveOvertimeEvent(Overtime args)
    {
        throw new NotImplementedException();
    }

    private void SaveSanctionEvent(Overtime args)
    {
        throw new NotImplementedException();
    }
    private void SaveVacationEvent(Overtime args)
    {
        throw new NotImplementedException();
    }
}
