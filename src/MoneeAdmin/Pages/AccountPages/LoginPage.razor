@* @using MoneeAdmin.Pages.OtherPages
@using Syncfusion.Blazor.Popups
 *@
@page "/identity/account/login"

@layout AuthenticationLayout

@* @inject SfDialogService DialogService *@

<div class="container">
    <div class="row">
        <div class="col-lg-5"></div>
        <div class="col-lg-2">
            <EditForm Enhance Model="User" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <div class="card bg-black" style="opacity:0.9; margin-top:50%; border-radius:10px; color: white; font-weight:bold">
                    <div class="card-header text-center fs-5 mb-2">Login</div>
                    <div class="container">
                        <div class="row">
                            <div class="col-lg-4 col-md-4 col-sm-4"></div>
                            <div class="col-lg-4 col-md-4 col-sm-4 d-flex justify-content-center">
                                <img style="border-radius:20px" src="images/companylogos/logo.png" height="50" width="50" alt="logo" />
                            </div>
                            <div class="col-lg-4 col-md-4 col-sm-4"></div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="form-group mt-3">
                            <label class="form-label">Email</label>
                            <InputText class="form-control" id="Email" @bind-Value="User.Email" />
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Password</label>
                            <input type="password" class="form-control" id="Password" @bind="User.Password" />
                        </div>
                        <div class="form-group mt-3">
                            @if (ShowLoadingButton)
                            {
                                <ButtonLoadingSpinner />
                            }
                            else
                            {
                                <button type="submit" class="btn btn-outline-primary float-end">Login</button>
                            }
                        </div>
                    </div>
                    <div class="card-footer">
                        <span class="text-center">
                            Don't have an account? |
                            <a class="btn-link" href="indetity/account/register">Sign Up</a>
                        </span>
                        <ValidationSummary />
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="col-lg-5"></div>
    </div>    
</div>


@code {
    public bool ShowLoadingButton { get; set; } = false;
    Login User = new Login();

    [CascadingParameter] public Task<AuthenticationState>? authenticationState { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }

    private async Task CheckUserAuthentication()
    {
        var user = (await authenticationState!).User;
        if (!user.Identity!.IsAuthenticated)
        {
            NavigationManager.NavigateTo("home/dashboard");
        }
    }

    async Task HandleLogin()
    {
        ShowLoadingButton = true;
        var result = await accountService.SignInAsync(User);
        if (result.Flag)
        {
            await ShowDialog(result.Message, "Login Success");
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession()
                {
                    Token = result.Token,
                    RefreshToken = result.RefreshToken
                });
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        else
        { 
            await ShowDialog(result.Message, "Alert");
        }
        ShowLoadingButton = false;
    }

    private async Task ShowDialog(string content, string title)
    {
        await dialogService.AlertAsync(content, title);
    }
}
