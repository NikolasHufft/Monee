@implements IDisposable

@if (allStates.ShowUser)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Users</h4>
                        <button class="btn btn-outline-success float-end" @onclick="OpenDialog">
                            <i class="bi bi-plus-circle-dotted"></i> Add User
                        </button>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Role</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (ManageUsers is not null)
                                    {
                                        int count = 1;

                                        foreach (ManageUser item in ManageUsers)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Name</td>
                                                <td>@item.Role</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="()=>EditClicked(item)"></i>@* text-bg-danger *@
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="()=>DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4">
                                                <div class="alert alert-fin text-center">No user added yet!</div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .cursorStyle {
        cursor: pointer;
    }
</style>


@* @ref gives me access to the ChangeTitle inside of the DepartmentDialog 
    The 3 parameters below are expect in the DepartmentDialog [Parameter]
*@
<UserDialog @ref="userDialog"
            OnSave="OnSave"
            ManageUser="ManageUser"
            SystemRoles="SystemRoles" />

@code
{

    UserDialog? userDialog;
    ManageUser ManageUser = new();
    public string Title = "Add";
    public List<ManageUser> ManageUsers { set; get; } = new();
    public List<SystemRole> SystemRoles { set; get; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
        await GetRoles();
        allStates.Action += StateHasChanged;
    }

    private async Task GetUsers()
    {
        ManageUsers = await accountService.GetUsers();        
    }

    private async Task GetRoles()
    {
        SystemRoles = await accountService.GetRoles();
    }

    private async Task OnSave(ManageUser user)
    {
        bool success = false;
        var result = await accountService.UpdateUser(user);
        success = await DisplayMessage(result.Flag, result.Message);

        if (success)
        {
            user = new();
            await GetUsers();           
        }
    }

    private void EditClicked(ManageUser user)
    {        
        ManageUser = user;
        OpenDialog();
    }


    private async Task DeleteClicked(ManageUser user)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete the {user.Name}?", "Confirm Delete");

        if (!confirm) return;

        var response = await accountService.DeleteUser(user.Id);

        var result = await DisplayMessage(response.Flag, response.Message);

        if (result)
        {
            await GetUsers();
        }
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    void OpenDialog()
    {
        userDialog?.OpenDialog();
    }

    public void Dispose()
    {
        allStates.Action -= StateHasChanged;
    }
}