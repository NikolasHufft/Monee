<SfDialog Width="100px" IsModal="true" ShowCloseIcon="true" @bind-visible="IsVisible">
    <DialogEvents OnOpen="OpenContextMenu" />
    <DialogTemplates>
        <Header>Employee Menu</Header>
        <Content>
            <div ="class=hstack gap-2 mb-2" id="cursorStyle" @onclick ="ViewClicked">
                <i class="bi bi-eye text-info"></i>
                <span id="cursorStyle" class="text-bg-info">View</span>
            </div>
            <div ="class=hstack gap-2 mb-2" id="cursorStyle" @onclick ="EditClicked">
                <i class="bi bi-pencil text-primary"></i>
                <span id="cursorStyle" class="text-bg-info">Edit</span>
            </div>
            <div ="class=hstack gap-2 mb-2" id="cursorStyle" @onclick ="DeleteClicked">
                <i class="bi bi-trash text-danger"></i>
                <span id="cursorStyle" class="text-danger">Delete</span>
            </div>
            <hr />
            <div ="class=hstack gap-2 mb-2" id="cursorStyle" @onclick ="AddOvertimeClicked">
                <i class="bi bi-trash text-danger"></i>
                <span id="cursorStyle" class="text-danger">Add Overtime</span>
            </div>
            <div ="class=hstack gap-2 mb-2" id="cursorStyle" @onclick ="AddHealthClicked">
                <i class="bi bi-trash text-danger"></i>
                <span id="cursorStyle" class="text-danger">Add Health</span>
            </div>
            <div ="class=hstack gap-2 mb-2" id="cursorStyle" @onclick ="AddSanctionClicked">
                <i class="bi bi-trash text-danger"></i>
                <span id="cursorStyle" class="text-danger">Add Sanction</span>
            </div>
        </Content>
    </DialogTemplates>
</SfDialog>

<style>
    #cursorStyle {
    cursor: pointer;
    }
</style>

@code {
    ContextMenu? contextMenu;
    SfDialog? OpenDialog;

    public bool IsVisible { get; set; } = false;

    [Parameter] public EventCallback HandleViewClicked { get; set; }
    private async Task ViewClicked() => await HandleViewClicked.InvokeAsync();

    [Parameter] public EventCallback HandleEditClicked { get; set; }
    private async Task EditClicked() => await HandleEditClicked.InvokeAsync();

    [Parameter] public EventCallback HandleDeleteClicked { get; set; }
    private async Task DeleteClicked() => await HandleDeleteClicked.InvokeAsync();

    [Parameter] public EventCallback HandleAddOvertimeClicked { get; set; }
    private async Task AddOvertimeClicked() => await HandleAddOvertimeClicked.InvokeAsync();

    [Parameter] public EventCallback HandleAddVacationClicked { get; set; }
    private async Task AddVacationClicked() => await HandleAddVacationClicked.InvokeAsync();

    [Parameter] public EventCallback HandleAddSanctionClicked { get; set; }
    private async Task AddSanctionClicked() => await HandleAddSanctionClicked.InvokeAsync();

    [Parameter] public EventCallback HandleAddHealthClicked { get; set; }
    private async Task AddHealthClicked() => await HandleAddHealthClicked.InvokeAsync();

    public void OpenContextMenu()
    {
        IsVisible = true;
        StateHasChanged();
    }

    public void CloseContextMenu()
    {
        IsVisible = false;
        StateHasChanged();
    }
}
