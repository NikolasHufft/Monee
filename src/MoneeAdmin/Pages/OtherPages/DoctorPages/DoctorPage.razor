@implements IDisposable

@if (allStates.ShowHealth)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card border-warning shadow-lg">
                    <div class="card-hearder">
                        <h4 class="float-start">
                            Health Information
                        </h4>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow:hidden; overflow:scroll">
                        <div class="card-body">
                            @{
                                var tool = (new List<string>() { "Search", "ExcelExport", "PdfExport", "Print" });
                            }
                            <SfGrid DataSource="@Doctors" AllowPaging="true" AllowSorting="true" Toolbar=@tool 
                            AllowExcelExport="true" AllowPdfExport="true" AllowFiltering="true" @ref="DefaultGrid">
                                <GridPageSettings PageSize="5"></GridPageSettings>
                                <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Doctor"></GridEvents>
                                <GridColumns>
                                    <GridColumn Field="@nameof(Doctor.EmployeeId)" HeaderText="ID"></GridColumn>
                                    <GridColumn Field="@nameof(Doctor.MedicalDiagnose)" HeaderText="Diagnose"></GridColumn>
                                    <GridColumn Field="@nameof(Doctor.MedicalRecommendation)" HeaderText="Recommendation"></GridColumn>
                                    <GridColumn Field="@nameof(Doctor.Date)" HeaderText="Date"></GridColumn>
                                    <GridColumn HeaderText="Action">
                                        <Template>
                                            @{
                                                var employee = (context as Doctor);
                                                <div>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(employee!)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(employee!)"></i>
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    #cursorStyle {
    cursor: pointer;
    } 
</style>

<DoctorDialog @ref="doctorDialog" Doctor="Doctor" HandleSaveOperationEvent="HandleSaveOperationEvent" />

@code {
    private SfGrid<Doctor>? DefaultGrid;
    DoctorDialog? doctorDialog;
    Doctor Doctor = new();

    public List<Doctor> Doctors { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetHealth();
        allStates.Action += StateHasChanged;
    }

    private async Task GetHealth() => Doctors = await doctorService.GetAll(Constants.DoctorBaseUrl);

    void AddButtonClicked()
    {
        Doctor = new();
        OpenDialog();
    }

    void OpenDialog() => doctorDialog?.OpenDialog();

    private async Task HandleSaveOperationEvent(Doctor doctor)
    {
        var result = await doctorService.Update(doctor, Constants.DoctorBaseUrl);
        var success = await DisplayMessage(result.Flag, result.Message);
        if (success)
        {
            Doctor = new();
            await GetHealth();
        }
    }

    private void EditClicked(Doctor doctor)
    {
        Doctor = doctor;
        OpenDialog();
    }

    private async Task DeleteClicked(Doctor doctor)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete this?", "Confirm");

        if (confirm)
        {
            var response = await doctorService.DeleteById(doctor.Id, Constants.DoctorBaseUrl);
            var result = await DisplayMessage(response.Flag, response.Message);
            if (result)
            {
                await GetHealth();
            }
        }
        else
        {
            return;
        }
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose()
    {
        allStates.Action -= StateHasChanged;
    }

    public async Task ToolbarClickedHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
        {
            await this.DefaultGrid!.ExportToExcelAsync();
        }
        if (args.Item.Text == "PDF Export")
        {
            await this.DefaultGrid!.ExportToPdfAsync();
        }
    }
    private void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        throw new NotImplementedException();
    }
}
